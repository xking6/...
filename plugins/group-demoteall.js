const { malvin } = require('../malvin');
const config = require('../settings');
const moment = require('moment-timezone');

malvin({
    pattern: 'bulkdemote',
    alias: ['massdemote'],
    desc: 'Demotes all admins to members (excluding bot & owners)',
    category: 'admin',
    react: 'üîª',
    filename: __filename,
    usage: `${config.PREFIX}bulkdemote`
}, async (malvin, mek, m, { from, isGroup, isBotAdmins, sender, botNumber, reply, isOwner }) => {
    try {
        if (!isGroup) return reply("‚ùå ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö …™s ·¥è…¥ ü è “ì·¥è Ä …¢ Ä·¥è·¥ú·¥òs");

        // Fetch fresh group metadata
        const groupMetadata = await malvin.groupMetadata(from);
        const participants = groupMetadata.participants;
        const isSenderAdmin = participants.some(p => p.id === sender && p.admin);
        if (!isSenderAdmin && !isOwner) {
            return reply("‚ùå ·¥è…¥ ü è …¢ Ä·¥è·¥ú·¥ò ·¥Ä·¥Ö·¥ç…™…¥s ·¥è Ä ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö");
        }
        if (!isBotAdmins) return reply("‚ùå …™ …¥·¥á·¥á·¥Ö ·¥õ·¥è  ô·¥á ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥ ·¥õ·¥è ·¥Ö·¥á·¥ç·¥è·¥õ·¥á ·¥ç·¥á·¥ç ô·¥á Äs");

        const ownerNumbers = config.OWNER_NUMBERS || ['263780934873', '263714757857', '263776388689'];
        const botJid = botNumber;

        // Filter admins to demote
        const targets = participants
            .filter(p => p.admin && !ownerNumbers.includes(p.id.split('@')[0]) && p.id !== botJid)
            .map(p => p.id);

        if (!targets.length) {
            return reply("‚ùå …¥·¥è ·¥Ä·¥Ö·¥ç…™…¥s ·¥õ·¥è ·¥Ö·¥á·¥ç·¥è·¥õ·¥á (·¥áx·¥Ñ ü·¥ú·¥Ö…™…¥…¢ ·¥è·¥°…¥·¥á Äs ·¥Ä…¥·¥Ö  ô·¥è·¥õ)");
        }

        // Limit to 50 demotions to avoid rate limits
        if (targets.length > 50) {
            return reply("‚ùå ·¥õ·¥è·¥è ·¥ç·¥Ä…¥ è ·¥Ä·¥Ö·¥ç…™…¥s ·¥õ·¥è ·¥Ö·¥á·¥ç·¥è·¥õ·¥á (·¥ç·¥Äx 50)");
        }

        await reply(`‚è≥ ·¥Ö·¥á·¥ç·¥è·¥õ…™…¥…¢ ${targets.length} ·¥Ä·¥Ö·¥ç…™…¥(s)...`);

        let success = 0, failed = 0;
        const failedJids = [];
        for (const jid of targets) {
            try {
                await malvin.groupParticipantsUpdate(from, [jid], 'demote');
                success++;
            } catch (error) {
                console.error(`‚ùå Failed to demote ${jid}:`, error.message);
                failed++;
                failedJids.push(jid.split('@')[0]);
            }
        }

        // Send result with timestamp
        const timestamp = moment().tz(config.TIMEZONE || 'Africa/Harare').format('DD/MM/YYYY HH:mm:ss');
        const resultText = `
‚ï≠‚ïê‚ú¶„Äî ü§ñ * ô·¥ú ü·¥ã ·¥Ö·¥á·¥ç·¥è·¥õ·¥á* „Äï‚ú¶‚ïê‚ïÆ
‚îÇ
‚îÇ ‚úÖ *s·¥ú·¥Ñ·¥Ñ·¥áss*
‚îÇ ‚û∏ üü¢ ·¥Ö·¥á·¥ç·¥è·¥õ·¥á·¥Ö: ${success}
‚îÇ ‚û∏ üî¥ “ì·¥Ä…™ ü·¥á·¥Ö: ${failed}${failed ? `\n‚îÇ ‚û∏ ·¥á Ä Ä·¥è Äs: @${failedJids.join(', @')}` : ''}
‚îÇ ‚è∞ *·¥õ…™·¥ç·¥á*: ${timestamp}
‚ï∞‚ïê‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ïê‚ïØ`;

        await malvin.sendMessage(from, {
            text: resultText,
            mentions: failedJids.map(jid => `${jid}@s.whatsapp.net`),
            contextInfo: {
                forwardingScore: 999,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                    newsletterJid: config.NEWSLETTER_JID || '120363402507750390@newsletter',
                    newsletterName: config.OWNER_NAME || 'MALVIN KING',
                    serverMessageId: 143
                }
            }
        }, { quoted: mek });

    } catch (error) {
        console.error('‚ùå Bulk demote error:', error.message);
        let errorMsg = '‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥Ñ·¥è·¥ç·¥ò ü·¥á·¥õ·¥á  ô·¥ú ü·¥ã ·¥Ö·¥á·¥ç·¥è·¥õ·¥á.';
        if (error.message.includes('not-authorized')) {
            errorMsg += ' …™…¥s·¥ú“ì“ì…™·¥Ñ…™·¥á…¥·¥õ ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s.';
        } else {
            errorMsg += ' ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä.';
        }
        await reply(errorMsg);
    }
});