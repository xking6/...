const { malvin } = require('../malvin');
const config = require('../settings');
const moment = require('moment-timezone');

// Global Map to track reported messages
const reportedMessages = new Map();

malvin({
    pattern: 'report',
    alias: ['ask', 'bug', 'request'],
    desc: 'Report a bug or request a feature to the bot owner',
    category: 'main',
    filename: __filename,
    usage: `${config.PREFIX}report <message>`
}, async (malvin, mek, m, { from, args, reply, isOwner }) => {
    try {
        if (!isOwner) {
            return reply("‚ùå ·¥è…¥ ü è ·¥õ ú·¥á  ô·¥è·¥õ ·¥è·¥°…¥·¥á Ä ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú…™s ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö");
        }

        if (!args.length) {
            return reply(
                `‚ï≠‚ïê‚ú¶„Äî ü§ñ * Ä·¥á·¥ò·¥è Ä·¥õ* „Äï‚ú¶‚ïê‚ïÆ\n` +
                `‚îÇ\n` +
                `‚îÇ üìú *·¥ús·¥Ä…¢·¥á:*\n` +
                `‚îÇ ‚û∏ ${config.PREFIX}report <message>\n` +
                `‚îÇ\n` +
                `‚îÇ üí° *·¥áx·¥Ä·¥ç·¥ò ü·¥á:*\n` +
                `‚îÇ ‚û∏ ${config.PREFIX}report Play command is not working\n` +
                `‚ï∞‚ïê‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ïê‚ïØ`
            );
        }

        const messageId = m.key.id;
        if (reportedMessages.has(messageId)) {
            return reply("‚ÑπÔ∏è ·¥õ ú…™s  Ä·¥á·¥ò·¥è Ä·¥õ  ú·¥Äs ·¥Ä ü Ä·¥á·¥Ä·¥Ö è  ô·¥á·¥á…¥ “ì·¥è Ä·¥°·¥Ä Ä·¥Ö·¥á·¥Ö. ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ “ì·¥è Ä ·¥Ä  Ä·¥ás·¥ò·¥è…¥s·¥á.");
        }

        // Validate input length (WhatsApp max message length ~4096 characters)
        const reportMessage = args.join(' ');
        if (reportMessage.length > 1000) {
            return reply("‚ùå  Ä·¥á·¥ò·¥è Ä·¥õ ·¥ç·¥áss·¥Ä…¢·¥á …™s ·¥õ·¥è·¥è  ü·¥è…¥…¢ (·¥ç·¥Äx 1000 ·¥Ñ ú·¥Ä Ä·¥Ä·¥Ñ·¥õ·¥á Äs).");
        }

        // Format report with timestamp
        const timestamp = moment().tz(config.TIMEZONE || 'Africa/Harare').format('DD/MM/YYYY HH:mm:ss');
        const reportText = `
‚ï≠‚ïê‚ú¶„Äî ü§ñ * Ä·¥á·¥ò·¥è Ä·¥õ/ Ä·¥á«´·¥ú·¥ás·¥õ* „Äï‚ú¶‚ïê‚ïÆ
‚îÇ
‚îÇ üë§ *·¥ús·¥á Ä*: @${m.sender.split('@')[0]}
‚îÇ ‚è∞ *·¥õ…™·¥ç·¥á*: ${timestamp}
‚îÇ üìù *·¥ç·¥áss·¥Ä…¢·¥á*: ${reportMessage}
‚ï∞‚ïê‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ö¨‚ïê‚ïØ`;

        const confirmationText = `‚úÖ  ú…™ ${m.pushName},  è·¥è·¥ú Ä  Ä·¥á·¥ò·¥è Ä·¥õ  ú·¥Äs  ô·¥á·¥á…¥ “ì·¥è Ä·¥°·¥Ä Ä·¥Ö·¥á·¥Ö ·¥õ·¥è ·¥õ ú·¥á ·¥è·¥°…¥·¥á Ä. ·¥ò ü·¥á·¥Äs·¥á ·¥°·¥Ä…™·¥õ...`;

        // Reusable context info
        const contextInfo = {
            mentionedJid: [m.sender],
            forwardingScore: 999,
            isForwarded: true,
            forwardedNewsletterMessageInfo: {
                newsletterJid: config.NEWSLETTER_JID || '120363402507750390@newsletter',
                newsletterName: config.OWNER_NAME || 'MALVIN KING',
                serverMessageId: 143
            }
        };

        // Send report to owner
        await malvin.sendMessage(`${config.DEV_NUMBER || '263714757857'}@s.whatsapp.net`, {
            text: reportText,
            contextInfo
        }, { quoted: m });

        // Mark as reported
        reportedMessages.set(messageId, true);
        // Clean up old reports (e.g., after 1 hour)
        setTimeout(() => reportedMessages.delete(messageId), 3600 * 1000);

        // Send confirmation
        await reply(confirmationText);

    } catch (error) {
        console.error('‚ùå Report command error:', error.message);
        let errorMsg = '‚ùå “ì·¥Ä…™ ü·¥á·¥Ö ·¥õ·¥è ·¥ò Ä·¥è·¥Ñ·¥áss  è·¥è·¥ú Ä  Ä·¥á·¥ò·¥è Ä·¥õ.';
        if (error.message.includes('Invalid JID')) {
            errorMsg += ' …™…¥·¥†·¥Ä ü…™·¥Ö ·¥è·¥°…¥·¥á Ä …¥·¥ú·¥ç ô·¥á Ä.';
        } else {
            errorMsg += ' ·¥ò ü·¥á·¥Äs·¥á ·¥õ Ä è ·¥Ä…¢·¥Ä…™…¥  ü·¥Ä·¥õ·¥á Ä.';
        }
        await reply(errorMsg);
    }
});